# nginx 능동방어 시스템 설정
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Lua 모듈 로드
load_module modules/ngx_http_lua_module.so;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 로그 포맷 정의
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    # 보안 강화된 로그 포맷
    log_format security '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'blocked=$blocked reason="$block_reason" '
                        'threat_level="$threat_level"';

    access_log /var/log/nginx/access.log main;
    access_log /var/log/nginx/security.log security;

    # 기본 보안 헤더
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Rate Limiting 설정
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=20r/s;

    # 연결 제한
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # Lua 패키지 경로
    lua_package_path "/etc/nginx/lua/?.lua;;";

    # Lua 공유 메모리 영역
    lua_shared_dict blocked_ips 10m;
    lua_shared_dict threat_scores 10m;
    lua_shared_dict rate_limit 10m;

    # 기본 서버 블록 (모든 요청을 차단)
    server {
        listen 80 default_server;
        server_name _;
        
        # 기본적으로 모든 요청을 차단
        location / {
            access_by_lua_block {
                local defense = require "defense"
                defense.check_request()
            }
            
            return 444; # 연결 종료
        }
    }

    # 보호할 웹사이트 설정
    server {
        listen 80;
        server_name your-domain.com;
        
        # 연결 제한
        limit_conn conn_limit_per_ip 10;
        
        # Rate Limiting 적용
        location /login {
            limit_req zone=login burst=3 nodelay;
            access_by_lua_block {
                local defense = require "defense"
                defense.check_request()
            }
            proxy_pass http://backend;
        }
        
        location /api/ {
            limit_req zone=api burst=5 nodelay;
            access_by_lua_block {
                local defense = require "defense"
                defense.check_request()
            }
            proxy_pass http://backend;
        }
        
        location / {
            limit_req zone=general burst=10 nodelay;
            access_by_lua_block {
                local defense = require "defense"
                defense.check_request()
            }
            proxy_pass http://backend;
        }
    }

    # 관리 인터페이스
    server {
        listen 8080;
        server_name localhost;
        
        location /admin {
            access_by_lua_block {
                local defense = require "defense"
                defense.check_admin_access()
            }
            
            root /var/www/admin;
            index index.html;
        }
        
        location /admin/api/ {
            access_by_lua_block {
                local defense = require "defense"
                defense.check_admin_access()
            }
            
            content_by_lua_block {
                local admin_api = require "admin_api"
                admin_api.handle_request()
            }
        }
    }

    # 백엔드 서버 풀
    upstream backend {
        server 127.0.0.1:3000;
        server 127.0.0.1:3001 backup;
    }
}
