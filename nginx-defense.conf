# nginx 능동방어 시스템 설정 (개선됨)
# Apache와 함께 사용 가능한 통합 시스템

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 로그 포맷 정의 (Apache와 호환)
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    log_format security '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'attack="$attack_score" block="$blocked" threat="$threat_level"';

    access_log /var/log/nginx/access.log main;
    access_log /var/log/nginx/security.log security;

    # 성능 최적화 (Apache보다 뛰어남)
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 20m;

    # 기본 보안 헤더 (Apache와 동일)
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'" always;

    # Rate Limiting (nginx 고유 기능 - Apache보다 효율적)
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=ddos_protection:10m rate=1r/s;

    # 연결 제한 (DDoS 방어)
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn_zone $server_name zone=conn_limit_per_server:10m;

    # Lua 모듈 로드 (Apache의 mod_lua와 유사)
    load_module modules/ngx_http_lua_module.so;

    # Lua 설정
    lua_package_path "/etc/nginx/lua/?.lua;;";
    lua_shared_dict blocked_ips 50m;
    lua_shared_dict threat_scores 20m;
    lua_shared_dict rate_limit 20m;
    lua_shared_dict ip_reputation 20m;

    # IP 기반 매핑 (빠른 필터링 - Apache보다 빠름)
    map $remote_addr $is_blocked_ip {
        default 0;
        # 동적 차단 IP 목록 (Apache와 공유 가능)
        include /etc/nginx/blocked_ips.conf;
    }

    # User-Agent 기반 필터링
    map $http_user_agent $is_bot {
        default 0;
        ~*bot 1;
        ~*crawler 1;
        ~*spider 1;
        ~*scanner 1;
    }

    # 민감한 경로 감지
    map $request_uri $is_sensitive {
        default 0;
        ~*admin 1;
        ~*login 1;
        ~*wp-admin 1;
        ~*phpmyadmin 1;
    }

    # 기본 서버 (모든 요청 차단)
    server {
        listen 80 default_server;
        server_name _;
        
        # 444로 즉시 종료 (대역폭 소비 제로 - Apache보다 효율적)
        location / {
            access_by_lua_block {
                local defense = require "defense"
                defense.check_request()
            }
            
            # 차단된 IP는 444로 연결 종료
            if ($is_blocked_ip) {
                return 444;
            }
            
            return 444;
        }
    }

    # 실제 웹사이트 설정
    server {
        listen 80;
        server_name your-domain.com;
        
        # 연결 제한 (nginx 고유 기능)
        limit_conn conn_limit_per_ip 10;
        limit_conn conn_limit_per_server 1000;
        
        # Apache와 유사한 디렉토리 구조 지원
        root /var/www/html;
        index index.html index.php;
        
        # Rate Limiting 적용
        location / {
            limit_req zone=general burst=20 nodelay;
            limit_req_status 429;
            
            # Lua 기반 능동방어
            access_by_lua_block {
                local defense = require "defense"
                local advanced = require "advanced_defense"
                
                -- 빠른 차단 검사
                if defense.is_blocked(ngx.var.remote_addr) then
                    ngx.exit(444)
                end
                
                -- 스마트 방어
                advanced.smart_defense()
            }
            
            # 차단된 IP는 444로 즉시 종료
            if ($is_blocked_ip) {
                return 444;
            }
            
            # Bot 처리
            if ($is_bot) {
                limit_req zone=ddos_protection burst=2 nodelay;
            }
            
            # 성능 최적화: 정적 파일 직접 서비스
            try_files $uri $uri/ @backend;
        }
        
        # 백엔드 프록시 (Apache or nginx)
        location @backend {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
        
        # API 엔드포인트 (엄격한 제한)
        location /api/ {
            limit_req zone=api burst=10 nodelay;
            
            access_by_lua_block {
                local defense = require "defense"
                defense.check_request()
                defense.adaptive_rate_limit()
            }
            
            proxy_pass http://backend;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # 로그인 페이지 (매우 엄격)
        location /login {
            limit_req zone=login burst=3 nodelay;
            limit_req_status 429;
            
            access_by_lua_block {
                local defense = require "defense"
                defense.check_request()
            }
            
            add_header X-Rate-Limit "5 requests per minute" always;
            
            proxy_pass http://backend;
        }
        
        # 관리자 페이지 (IP 화이트리스트 + Auth)
        location /admin/ {
            # IP 화이트리스트
            allow 192.168.1.0/24;
            allow 127.0.0.1;
            deny all;
            
            # 추가 보안
            access_by_lua_block {
                local defense = require "defense"
                defense.check_admin_access()
            }
            
            auth_basic "Admin Area";
            auth_basic_user_file /etc/nginx/.htpasswd;
            
            proxy_pass http://backend;
        }
        
        # Honey Token (능동방어)
        location ~ ^/(fake-admin|wp-login|phpmyadmin) {
            access_by_lua_block {
                local advanced = require "advanced_defense"
                advanced.apply_honey_trap(ngx.var.remote_addr, ngx.var.request_uri)
            }
            
            return 200 "<html><body><h1>Login Page</h1><p>Fake login form here</p></body></html>";
        }
        
        # 정적 파일 캐싱 (성능 최적화)
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
            
            limit_req zone=general burst=100 nodelay;
        }
        
        # PHP 파일 보호
        location ~ \.php$ {
            limit_req zone=general burst=10 nodelay;
            
            # PHP 스캔 방어
            access_by_lua_block {
                local advanced = require "advanced_defense"
                if advanced.is_php_scan() then
                    ngx.exit(444)
                end
            }
            
            proxy_pass http://backend;
        }
        
        # 로그 설정
        error_log /var/log/nginx/error.log warn;
        access_log /var/log/nginx/access.log main;
        access_log /var/log/nginx/security.log security;
    }

    # Load Balancer 설정 (Apache와 nginx 함께 사용)
    upstream backend {
        # nginx 서버 (다음 우선순위)
        server 127.0.0.1:3000;
        
        # Apache 서버 (백업)
        server 127.0.0.1:8080 backup;
        
        # 부하 분산 알고리즘
        # least_conn; # 최소 연결
        # ip_hash;    # IP 기반
        # fair;       # 응답 시간 기반
    }

    # 관리 인터페이스 (Apache와 nginx 모두 모니터링)
    server {
        listen 8080;
        server_name localhost;
        
        location /admin {
            access_by_lua_block {
                local defense = require "defense"
                defense.check_admin_access()
            }
            
            root /var/www/admin;
            index index.html;
        }
        
        location /admin/api/ {
            access_by_lua_block {
                local defense = require "defense"
                defense.check_admin_access()
            }
            
            content_by_lua_block {
                local admin_api = require "admin_api"
                admin_api.handle_request()
            }
        }
        
        # Apache 상태 모니터링
        location /apache-status {
            proxy_pass http://127.0.0.1:8080/server-status;
            proxy_set_header Host $host;
        }
        
        # nginx 상태 모니터링
        location /nginx-status {
            stub_status on;
            access_log off;
        }
    }

    # Rate Limiting 오류 페이지
    error_page 429 /429.html;
    location = /429.html {
        root /var/www/error;
        internal;
    }
    
    # 403 오류 페이지
    error_page 403 /403.html;
    location = /403.html {
        root /var/www/error;
        internal;
    }
    
    # 444 오류는 로그만 기록
    error_page 444 /444.html;
    location = /444.html {
        internal;
        return 200 "";
    }
}

# 보조 nginx 인스턴스 (전용 부하 분산)
# 이 설정은 Apache와 nginx를 동시에 사용하는 경우 유용
