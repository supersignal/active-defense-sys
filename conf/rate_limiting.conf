# nginx 능동방어 시스템 고급 Rate Limiting 설정

# DDoS 방어를 위한 고급 Rate Limiting 규칙들
# 이 파일을 nginx.conf에 include하여 사용

# 기본 Rate Limiting Zones
limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=general:10m rate=20r/s;
limit_req_zone $binary_remote_addr zone=static:10m rate=50r/s;

# DDoS 방어를 위한 추가 Zones
limit_req_zone $binary_remote_addr zone=ddos_protection:10m rate=1r/s;
limit_req_zone $binary_remote_addr zone=aggressive:10m rate=100r/m;

# 연결 제한 Zones
limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
limit_conn_zone $server_name zone=conn_limit_per_server:10m;

# 동적 Rate Limiting을 위한 Lua 공유 메모리
lua_shared_dict rate_limit_cache 50m;
lua_shared_dict ip_reputation 20m;
lua_shared_dict attack_patterns 10m;

# 고급 Rate Limiting 매핑
map $http_user_agent $is_bot {
    default 0;
    ~*bot 1;
    ~*crawler 1;
    ~*spider 1;
    ~*scanner 1;
}

map $request_uri $is_sensitive {
    default 0;
    ~*admin 1;
    ~*login 1;
    ~*api 1;
    ~*\.php$ 1;
    ~*\.asp$ 1;
    ~*\.jsp$ 1;
}

# IP 기반 Rate Limiting 매핑
map $remote_addr $rate_limit_key {
    default $binary_remote_addr;
    ~^192\.168\. 192.168.0.0/16;
    ~^10\. 10.0.0.0/8;
    ~^172\.16\. 172.16.0.0/12;
}

# 서버 블록 내에서 사용할 Rate Limiting 규칙들
# 이 부분은 각 server 블록에 추가해야 함

# 예시 서버 블록 설정:
# server {
#     listen 80;
#     server_name example.com;
#     
#     # 연결 제한
#     limit_conn conn_limit_per_ip 10;
#     limit_conn conn_limit_per_server 1000;
#     
#     # 루트 경로 - 일반 Rate Limiting
#     location / {
#         limit_req zone=general burst=20 nodelay;
#         limit_req_status 429;
#         
#         # Bot 감지 시 더 엄격한 제한
#         if ($is_bot) {
#             limit_req zone=ddos_protection burst=2 nodelay;
#         }
#         
#         # 민감한 경로 감지 시 더 엄격한 제한
#         if ($is_sensitive) {
#             limit_req zone=aggressive burst=5 nodelay;
#         }
#         
#         proxy_pass http://backend;
#     }
#     
#     # 로그인 페이지 - 매우 엄격한 제한
#     location /login {
#         limit_req zone=login burst=3 nodelay;
#         limit_req_status 429;
#         
#         # 추가 보안 헤더
#         add_header X-Rate-Limit "5 requests per minute" always;
#         
#         proxy_pass http://backend;
#     }
#     
#     # API 엔드포인트 - 중간 수준 제한
#     location /api/ {
#         limit_req zone=api burst=10 nodelay;
#         limit_req_status 429;
#         
#         # API 키 기반 Rate Limiting (선택사항)
#         # limit_req_zone $http_x_api_key zone=api_key:10m rate=100r/s;
#         
#         proxy_pass http://backend;
#     }
#     
#     # 정적 파일 - 관대한 제한
#     location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
#         limit_req zone=static burst=100 nodelay;
#         expires 1y;
#         add_header Cache-Control "public, immutable";
#         
#         proxy_pass http://backend;
#     }
#     
#     # Rate Limiting 오류 페이지
#     error_page 429 /429.html;
#     location = /429.html {
#         root /var/www/error;
#         internal;
#     }
# }

# 고급 Rate Limiting을 위한 Lua 스크립트 함수들
# 이 함수들은 defense.lua에서 사용할 수 있음

--[[
-- Lua에서 사용할 수 있는 고급 Rate Limiting 함수들

-- 동적 Rate Limiting 적용
function apply_dynamic_rate_limit(ip, uri, user_agent)
    local rate_limit_cache = ngx.shared.rate_limit_cache
    local ip_reputation = ngx.shared.ip_reputation
    
    -- IP 평판 확인
    local reputation = ip_reputation:get(ip) or 0
    
    -- 평판에 따른 Rate Limiting 조정
    if reputation > 80 then
        -- 악성 IP - 매우 엄격한 제한
        return "ddos_protection", 1
    elseif reputation > 50 then
        -- 의심스러운 IP - 엄격한 제한
        return "aggressive", 5
    elseif reputation > 20 then
        -- 주의 IP - 일반 제한
        return "general", 10
    else
        -- 정상 IP - 관대한 제한
        return "general", 20
    end
end

-- 공격 패턴 감지 및 Rate Limiting 강화
function detect_attack_pattern(ip, requests)
    local attack_patterns = ngx.shared.attack_patterns
    
    -- 연속적인 동일한 요청 패턴 감지
    local pattern_key = ip .. ":" .. requests[#requests].uri
    local pattern_count = attack_patterns:get(pattern_key) or 0
    
    if pattern_count > 10 then
        -- 패턴 기반 공격 감지
        attack_patterns:set(pattern_key, pattern_count + 1, 300) -- 5분간 유지
        return true
    end
    
    attack_patterns:set(pattern_key, pattern_count + 1, 60) -- 1분간 유지
    return false
end

-- 시간대별 Rate Limiting 조정
function adjust_rate_limit_by_time()
    local hour = tonumber(os.date("%H"))
    
    -- 새벽 시간대 (2-6시) 더 엄격한 제한
    if hour >= 2 and hour <= 6 then
        return "aggressive", 5
    -- 업무 시간대 (9-18시) 일반 제한
    elseif hour >= 9 and hour <= 18 then
        return "general", 20
    -- 저녁 시간대 더 관대한 제한
    else
        return "general", 30
    end
end
--]]

# Rate Limiting 통계 및 모니터링을 위한 로그 포맷
log_format rate_limit '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      'rate_limit_zone="$rate_limit_zone" '
                      'rate_limit_status="$rate_limit_status" '
                      'rate_limit_delay="$rate_limit_delay"';

# Rate Limiting 관련 변수들
map $status $rate_limit_status {
    default 0;
    ~^429 1;
}

# Rate Limiting 모니터링을 위한 추가 설정
# 이 설정들을 사용하여 Rate Limiting 효과를 모니터링할 수 있음

# 예시: Rate Limiting 통계 수집
# location /rate-limit-stats {
#     access_log /var/log/nginx/rate_limit.log rate_limit;
#     return 200 "Rate limiting statistics collected";
# }

# Rate Limiting 테스트를 위한 엔드포인트
# location /test-rate-limit {
#     limit_req zone=general burst=5 nodelay;
#     return 200 "Rate limit test endpoint";
# }
