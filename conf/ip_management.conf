# nginx 능동방어 시스템 IP 관리 설정

# IP 차단 및 화이트리스트 관리를 위한 설정 파일
# 이 파일을 nginx.conf에 include하여 사용

# IP 기반 접근 제어를 위한 매핑
map $remote_addr $is_blocked_ip {
    default 0;
    # 차단된 IP 목록 (동적으로 업데이트됨)
    include /etc/nginx/blocked_ips.conf;
}

map $remote_addr $is_whitelist_ip {
    default 0;
    # 화이트리스트 IP 목록
    include /etc/nginx/whitelist_ips.conf;
}

# 국가별 접근 제어 (GeoIP 모듈 필요)
# map $geoip_country_code $allowed_country {
#     default 0;
#     KR 1;
#     US 1;
#     JP 1;
# }

# IP 범위 기반 접근 제어
map $remote_addr $is_private_ip {
    default 0;
    ~^192\.168\. 1;
    ~^10\. 1;
    ~^172\.16\. 1;
    ~^172\.17\. 1;
    ~^172\.18\. 1;
    ~^172\.19\. 1;
    ~^172\.20\. 1;
    ~^172\.21\. 1;
    ~^172\.22\. 1;
    ~^172\.23\. 1;
    ~^172\.24\. 1;
    ~^172\.25\. 1;
    ~^172\.26\. 1;
    ~^172\.27\. 1;
    ~^172\.28\. 1;
    ~^172\.29\. 1;
    ~^172\.30\. 1;
    ~^172\.31\. 1;
    ~^127\. 1;
}

# Tor 네트워크 감지 (Tor Exit Node 목록)
map $remote_addr $is_tor_exit {
    default 0;
    # Tor Exit Node IP 목록은 별도 파일로 관리
    include /etc/nginx/tor_exit_nodes.conf;
}

# VPN/Proxy 감지 (공개 VPN 목록)
map $remote_addr $is_vpn_proxy {
    default 0;
    # VPN/Proxy IP 목록은 별도 파일로 관리
    include /etc/nginx/vpn_proxy_list.conf;
}

# 동적 IP 차단을 위한 Lua 공유 메모리
lua_shared_dict blocked_ips 50m;
lua_shared_dict ip_reputation 20m;
lua_shared_dict suspicious_ips 10m;

# IP 관리 서버 블록 설정 예시
# server {
#     listen 80;
#     server_name example.com;
#     
#     # 차단된 IP 접근 거부
#     if ($is_blocked_ip) {
#         return 403 "Access Denied - IP Blocked";
#     }
#     
#     # Tor Exit Node 차단 (선택사항)
#     if ($is_tor_exit) {
#         return 403 "Access Denied - Tor Network Detected";
#     }
#     
#     # VPN/Proxy 차단 (선택사항)
#     if ($is_vpn_proxy) {
#         return 403 "Access Denied - VPN/Proxy Detected";
#     }
#     
#     # 국가별 접근 제어 (선택사항)
#     # if ($allowed_country = 0) {
#     #     return 403 "Access Denied - Country Not Allowed";
#     # }
#     
#     # 화이트리스트 IP는 모든 제한 우회
#     if ($is_whitelist_ip) {
#         # 화이트리스트 IP에 대한 특별 처리
#         access_by_lua_block {
#             -- 화이트리스트 IP는 Rate Limiting 우회
#             ngx.var.bypass_rate_limit = "1"
#         }
#     }
#     
#     # 일반적인 접근 제어
#     location / {
#         # Lua를 통한 동적 IP 검증
#         access_by_lua_block {
#             local defense = require "defense"
#             defense.check_ip_access()
#         }
#         
#         proxy_pass http://backend;
#     }
# }

# IP 관리 API 엔드포인트
# server {
#     listen 8080;
#     server_name localhost;
#     
#     # IP 차단 API
#     location /api/block-ip {
#         access_by_lua_block {
#             local admin_api = require "admin_api"
#             admin_api.check_admin_access()
#         }
#         
#         content_by_lua_block {
#             local admin_api = require "admin_api"
#             admin_api.block_ip()
#         }
#     }
#     
#     # IP 차단 해제 API
#     location /api/unblock-ip {
#         access_by_lua_block {
#             local admin_api = require "admin_api"
#             admin_api.check_admin_access()
#         }
#         
#         content_by_lua_block {
#             local admin_api = require "admin_api"
#             admin_api.unblock_ip()
#         }
#     }
#     
#     # 화이트리스트 관리 API
#     location /api/whitelist {
#         access_by_lua_block {
#             local admin_api = require "admin_api"
#             admin_api.check_admin_access()
#         }
#         
#         content_by_lua_block {
#             local admin_api = require "admin_api"
#             admin_api.manage_whitelist()
#         }
#     }
# }

# IP 관리 로그 포맷
log_format ip_management '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'blocked=$is_blocked_ip whitelist=$is_whitelist_ip '
                        'private=$is_private_ip tor=$is_tor_exit '
                        'vpn=$is_vpn_proxy reputation="$ip_reputation"';

# IP 관리 통계 수집을 위한 설정
# location /ip-stats {
#     access_log /var/log/nginx/ip_management.log ip_management;
#     return 200 "IP management statistics collected";
# }

# IP 차단 테스트 엔드포인트
# location /test-ip-block {
#     access_by_lua_block {
#         local defense = require "defense"
#         defense.test_ip_blocking()
#     }
#     
#     return 200 "IP blocking test completed";
# }

# 자동 IP 차단을 위한 Lua 스크립트 함수들
# 이 함수들은 defense.lua에서 사용할 수 있음

--[[
-- Lua에서 사용할 수 있는 IP 관리 함수들

-- IP 차단 함수
function block_ip(ip, reason, duration)
    local blocked_ips = ngx.shared.blocked_ips
    local block_key = "blocked:" .. ip
    local block_data = {
        reason = reason,
        blocked_at = os.time(),
        duration = duration or 3600 -- 기본 1시간
    }
    
    blocked_ips:set(block_key, cjson.encode(block_data), duration)
    
    -- 로그 기록
    ngx.log(ngx.WARN, "IP 차단: " .. ip .. " - 이유: " .. reason)
    
    -- 차단된 IP 목록 파일 업데이트
    update_blocked_ips_file(ip, "add")
end

-- IP 차단 해제 함수
function unblock_ip(ip)
    local blocked_ips = ngx.shared.blocked_ips
    local block_key = "blocked:" .. ip
    
    blocked_ips:delete(block_key)
    
    -- 로그 기록
    ngx.log(ngx.INFO, "IP 차단 해제: " .. ip)
    
    -- 차단된 IP 목록 파일 업데이트
    update_blocked_ips_file(ip, "remove")
end

-- IP 평판 업데이트 함수
function update_ip_reputation(ip, score_change)
    local ip_reputation = ngx.shared.ip_reputation
    local current_score = ip_reputation:get(ip) or 0
    local new_score = math.max(0, math.min(100, current_score + score_change))
    
    ip_reputation:set(ip, new_score, 86400) -- 24시간 유지
    
    -- 평판이 낮으면 자동 차단
    if new_score > 80 then
        block_ip(ip, "low_reputation", 7200) -- 2시간 차단
    end
end

-- 의심스러운 IP 감지 함수
function detect_suspicious_ip(ip, behavior)
    local suspicious_ips = ngx.shared.suspicious_ips
    local suspicious_key = "suspicious:" .. ip
    local current_count = suspicious_ips:get(suspicious_key) or 0
    
    suspicious_ips:set(suspicious_key, current_count + 1, 3600) -- 1시간 유지
    
    -- 의심스러운 행동이 많으면 차단
    if current_count > 5 then
        block_ip(ip, "suspicious_behavior", 1800) -- 30분 차단
    end
end

-- 차단된 IP 목록 파일 업데이트 함수
function update_blocked_ips_file(ip, action)
    local file_path = "/etc/nginx/blocked_ips.conf"
    local temp_file = file_path .. ".tmp"
    
    if action == "add" then
        -- IP 추가
        local file = io.open(file_path, "a")
        if file then
            file:write("    " .. ip .. " 1;\n")
            file:close()
        end
    elseif action == "remove" then
        -- IP 제거
        local input = io.open(file_path, "r")
        local output = io.open(temp_file, "w")
        
        if input and output then
            for line in input:lines() do
                if not string.match(line, ip) then
                    output:write(line .. "\n")
                end
            end
            input:close()
            output:close()
            
            os.rename(temp_file, file_path)
        end
    end
    
    -- nginx 설정 리로드
    os.execute("nginx -s reload")
end
--]]
